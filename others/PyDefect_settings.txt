[mvm7218@p-sc-2344 structure_opt]$ cd ~
[mvm7218@p-sc-2344 ~]$ nano ./.config/.pmgrc.yaml


Step-1: Install Python3. Run Python shell and install packages
  pip install pydefect
  pip install vise

Step-2: Extract POTCAR files in a directory
  cd /storage/work/mvm7218/
  mkdir potpaw_PBE.54
  tar -xzvf  potpaw_PBE.54.tar.gz -C /storage/work/mvm7218/potpaw_PBE.54

Step-3: Edit .pmgrc.yaml file and add POTCAR and Materials project API
  cd ~
  cd .config
  nano .pmgrc.yaml (or nano .config/.pmgrc.yaml) (if error with .pmgrc.yaml, then use>> find . -name .pmgrc.yaml -type f -exec readlink -f \{\} \;)
    PMG_DEFAULT_FUNCTIONAL: PBE_54
    PMG_MAPI_KEY: ksrEbuvP0ucRZAas11zIz8y7lii15gpy
    PMG_VASP_PSP_DIR: /storage/work/mvm7218/

Step-4: Create the directory tree
<project_name>
 │
 ├ pydefect.yaml
 ├ vise.yaml
 │
 ├ unitcell/ ── structure_opt/
 │            ├ band/
 │            ├ dielectric/
 │            └ dos/
 │
 ├ cpd/ ──── <competing_phase 1>
 │       ├── <competing_phase 2>
 │           ....
 │
 └ defect/ ── perfect/
            ├─ Va_X_0/
            ├─ Va_X_1/
            ├─ Va_X_2/
             ...

[use GaN (project name) folder as the base]  
  mkdir GaN
  cd GaN
  mkdir unitcell
  mkdir unitcell/structure_opt
  mkdir unitcell/band
  mkdir unitcell/dielectric
  mkdir unitcell/dos
  mkdir unitcell/relax
  mkdir cpd
  mkdir defect
  mkdir defect/perfect

Step-5: Download a pristine bulk unitcell (primitive cell) from Materials Project and upload it to the 'unitcell/structure_opt/' folder
Step-6: Calculate relaxation (point-defect calculations are generally performed at the theoretically relaxed structure)

    cd unitcell/structure_opt
    vise vs # creates INCAR, POTCAR, and KPOINTS for the relax calculation [vise vs --uniform_kpt_mode]
    copy the slurm pacakge to the 'structure_opt' folder
  Run the slurm script (run.slurm) with 'vasp standard' to calculate the relax calculation from the 'structure_opt' folder
    sbatch run.slurm
  Copy the all the files to the 'unitcell/relax' folder for future reference
    cp * ../relax

  Remove all files in the 'unitcell/structure_opt' folder, create a new blank 'POSCAR' and 'run.slurm' file
    rm *
    touch POSCAR
    touch run.slurm

Step-7: copy 'relax/CONTCAR' contents to the 'structure_opt/POSCAR' (not needed), 'relax/run.slurm' contents to the 'structure_opt/run.slurm'
    cp ../relax/CONTCAR POSCAR
    cp ../relax/run.slurm run.slurm
  Find the Fermi level (print the very last 1)
    grep E-fermi OUTCAR | tail -1

Step-8: We create 'band/', 'dos/' and 'dielectric/' in 'unitcell/' and copy POSCAR from 'unitcell/structure_opt/'. 
    cp POSCAR -r ../band
    cp POSCAR -r ../dos
    cp POSCAR -r ../dielectric

  # Use the following procedure for each band, dos, and dielectric directory:
  Move to 'unitcell/band' directory and run the following comamnd
  Go to 'structure_opt' and run vasp-band calculation
  Plot band structure [can get help by: vise plot_band --help]
  Find the Fermi level (print the very last 1)
  Copy the band calculation file to the 'unitcell/band/' directory

    cd ../band
    vise vs -t band -d ../structure_opt
    cd ../structure_opt
    sbatch run.slurm
    vise plot_band 
    grep E-fermi OUTCAR | tail -1
    cp * -r ../band/

  Recreate 'structure_opt' contents
    rm *
    touch POSCAR
    touch run.slurm
    cp ../relax/CONTCAR POSCAR
    cp ../relax/run.slurm run.slurm

  for 'unitcell/dos' and 'unitcell/dielectric' directory use the following commands to create the files, then copy the the respective folders
    cd ../dos
    vise vs -t dos -d ../structure_opt -uis LVTOT True LAECHG True KPAR 1
    cd ../structure_opt
    sbatch run.slurm
    grep E-fermi OUTCAR | tail -1
    vise plot_dos
    cp * -r ../dos/

    rm *
    touch POSCAR
    touch run.slurm
    cp ../relax/CONTCAR POSCAR
    cp ../relax/run.slurm run.slurm

  Same process for the dielectric
    cd ../dielectric
    vise vs -t dielectric_dfpt -d ../structure_opt
    cd ../structure_opt
    sbatch run.slurm
    cp * -r ../dielectric/

    rm *
    touch POSCAR
    touch run.slurm
    cp ../relax/CONTCAR POSCAR
    cp ../relax/run.slurm run.slurm    

Step-9: Gathering unitcell information related to point-defect calculations. See the unitcell.yaml file to get the bandgap value (cbm - vbm = bandgap)
  move to the 'unitcell' directory and run the command
  cd ..
  pydefect_vasp u -vb band/vasprun.xml -ob band/OUTCAR -odc dielectric/OUTCAR -odi dielectric/OUTCAR -n GaN
  pydefect_print unitcell.yaml  

Step-10: if required, open a python terminal and upgrade the package
  pip install --upgrade pydefect
  pip install --upgrade vise
  pip install --upgrade mp-api
  
Step-11: modify and correct the files
  ### download the following file and replace the 'mprester.py' file's content
  # https://github.com/materialsproject/api/blob/main/mp_api/client/mprester.py
  cd /storage/home/mvm7218/.local/lib/python3.8/site-packages/mp_api/client/mprester.py
  # in 'mprester.py' file hardcode the materials project ket to the default API key 
  # line>> DEFAULT_API_KEY = environ.get("MP_API_KEY", "ksrEbuvP0ucRZAas11zIz8y7lii15gpy"))
  ### download the following file (added at the last part of this instruction set) and replace the 'mp_tools.py' file's content
  cd /storage/home/mvm7218/.local/lib/python3.8/site-packages/pydefect/util/mp_tools.py

Step-11: Calculation of competing phases [also consider the impurities - Mg, Si, etc, all the atoms used in the structure should be added here]. Move to 'cpd/' directory and run the command
  cd ../cpd
  pydefect_vasp mp -e Ga N --e_above_hull 0.0005
  pydefect_vasp mp -e Ga --e_above_hull 0.0005
  pydefect_vasp mp -e N --e_above_hull 0.0005
  pydefect_vasp mp -e Si --e_above_hull 0.0005
  pydefect_vasp mp -e Mg --e_above_hull 0.0005
  pydefect_vasp mp -e Ga N Mg Si --e_above_hull 0.0005
  
Step-12: Create VASP files for each competing phases, with the same ENCUT (1.3x max energy value). Use the same ECUT used for the Relaxing the unit cell. ENCUT for bands, dos, dielectric could be less than that.
  for i in *_*/;do cd $i; vise vs -uis ENCUT 520.0; cd ../;done

Step-13: Create a symbolic link of these competing phases with the pristine structure (if used same ENCUT), can use previously calculated one [optional step]
  ln -s ../unitcell/relax GaN_unitcell (if ENCUT of relax is same as the competing phases. in this case delete 'GaN_mp-804' file, otherwise, do not link just use the three folders created by in step-11,12)

Step-14: Copy-paste 'run.slurm' file in each of the three competing phase folders and run vasp calculation in each directory
  for dir in */;do cd $dir; cp ../../unitcell/band/run.slurm .; sbatch run.slurm; cd ../;done 

Step-15: Generate the 'composition_energies.yaml' file, which collects the total energies per calculated formula
  #return to '/cpd' folder. Read the file and store the energies for better understanding and future reference.
  pydefect_vasp mce -d */
  pydefect_print composition_energies.yaml

Step-16: Create 'relative_energies.yaml' and 'standard_energies.yaml'. Read the files and store the energies for better understanding and future reference. The first command also generates 'convex_hull.pdf' convex hall diagram.

  pydefect sre
  pydefect_print standard_energies.yaml
  pydefect_print relative_energies.yaml

Step-17: Make information on the CPD - creates 'chem_pot_diag.json' and 'target_vertices.yaml' files. Quickly read the files and its contents. Finally, plot the CPD diagram - creates 'cpd.pdf'
  pydefect cv -t GaN
  pydefect_print chem_pot_diag.json
  pydefect_print target_vertices.yaml
  pydefect pc
  #In the cpd.pdf figure, there will be points A, B, etc. meaning which element is Rich. In our case point-A means Ga-rich, point-B means N-rich. Rich means the chemical potential of that one is higher than the other.
  #Remember this A,B, etc. points. Because these points will be used to plot chemical potential diagram

*Step-18: Check the defect formation energies sooner (avoiding laborious CPD calculation process, steps 11-17) based on the MPD [optional]
  #prepare atom calculation directories [was not able to install BoltzTraP2, skipping step-18]
  vise_util map -e Ga N
  #install BoltzTraP2
  cd ~
  
  #cd to the '/cpd' directory
  vise_util map -e Ga N

Step-19: Create files related to a supercell for defect incorporation
  Go to '/defect/' directory. Use the POSCAR stored in the 'structure_opt/' directory [use primitive POSCAR, if error occurs with the current relaxed POSCAR]. Create supercell POSCAR file (SPOSCAR) - also creates 'supercell_info.json' file. Read the file and store details for future analysis and reference.
    cd ../defect
    pydefect s -p ../unitcell/structure_opt/POSCAR
    pydefect_print supercell_info.json

  [Optional step]
  If one wants to know the conventional cell, type
    vise si -p ../unitcell/structure_opt/POSCAR -c
  

Step-20: Incoporate defects
  Build the 'defect_in.yaml' file - for  antisite and vacancy defects. Add substituted defect species (n-type: Si, p-type: Mg)pydefect_print volumetric_data_local_extrema.json. To manually set the oxidation state of Si to 4. Read the 'defect_in.yaml' file and store details for future references. 
    pydefect ds
    pydefect ds -d Si Mg
    pydefect ds --oxi_states Si 4
    pydefect_print defect_in.yaml

Step-21: Decision of interstitial sites
  Generate volumetric data, e.g., AECCAR and LOCPOT, based on the standardized primitive cell, already done in DOS calculation. See the local minima of the charge density. Creates 'volumetric_data_local_extrema.json'
    cp ../unitcell/dos/AECCAR0 .
    cp ../unitcell/dos/AECCAR1 .
    cp ../unitcell/dos/AECCAR2 .
    cp ../unitcell/dos/LOCPOT .
    pydefect_vasp le -v AECCAR{0,2} -i all_electron_charge
  
  Add the two interstitial sites (-i 1 2). Rebuild the 'defect_in.yaml' file - for  adding interstitials to antisite and vacancy defects. 
  Build the 'defect_in.yaml' file - for  antisite and vacancy defects. Read the 'defect_in.yaml' file and store details for future references. 
  
    pydefect_util ai --local_extrema volumetric_data_local_extrema.json -i 1 2
    pydefect ds
    pydefect_print defect_in.yaml

  [optional]
  [If does not work (and receive NotPrimitiveError, follow this:
    #replace the value of the CONTCAR file in '/unitcell/structure_opt/' file with 'Unitcell in the supercell_info.json'
    pydefect s -p ../unitcell/structure_opt/CONTCAR
    pydefect_util ai --local_extrema volumetric_data_local_extrema.json -i 1 2 
    ] 
  #If the input structure is different from the standardized primitive cell, NotPrimitiveError is raised
  #To pop the interstitial sites, use>> pydefect pi -i 1 -s supercell_info.json

Step-22: Create point-defect calculation directories. Creates 'defect_entry.json' file in each directory. When required, go to the specific defect directory, read and store the data for future reference and analysis. Copy the perfect supercell structure to the perfect folder.
    pydefect_vasp de
    cp SPOSCAR ./perfect/POSCAR  [need to check, if I indeed need to run file for the POSCAR also]
    pydefect_print defect_entry.json (if required, run this in each directory to get that specific defect info)

  [optional]       
  #avoid treating complex defects. 
    pydefect_vasp_util de -d . -p ../perfect/POSCAR -n complex_defect

Step-23: Parsing supercell calculation results
  Create the vasp input files INCAR with required parameters. Use ENCUT same as relax calculation. Copy supercell run.slurm (srun.slurm) to each directory from personal slurm script directory ((use 4 cpu, 256 GB ram, 32 tasks per cpu)). Execuate slurm script from each directory and perform the VASP calculation of each defect directory.

    for i in */;do cd $i; vise vs -t defect -uis ENCUT 520.0 NSW 140 NCORE 32 EDIFFG -0.03; cd ../;done
    for i in */;do cd $i; cp /storage/work/mvm7218/Slurm/srun.slurm .; cd ../;done
    for dir in */;do cd $dir; sbatch run.slurm; cd ..; done

>>
Step-24: Generate the calc_results.json that contains the first-principles calculation results related to the defect properties
  Generate 'calc_results.json' in all the calculated directories 
  # defect_vasp cr -d */ perfect py
    pydefect_vasp cr -d *_*/ perfect
    cd perfect
    pydefect_vasp cr -d .
    cd ..

Step-24: Corrections of defect formation energies in finite-size supercells [creates 'correction.pdf' in each defect directory]
  #the total energies for charged defects are not properly estimated due to interactions between a defect, its images, and background charge
  pydefect efnv -d *_*/ -pcr perfect/calc_results.json -u ../unitcell/unitcell.yaml
  #create defect_structure_info.json files to analyze the defect local structures [in each defect directory]
  pydefect dsi -d *_*/
  #create VESTA file (defect.vesta) for analyzing the defect structure files [in each defect directory]
  pydefect_util dvf -d *_*/ 

*Step-25: Check defect eigenvalues and band-edge states in supercell calculations [Optional Stage]
  #defects with (1) deep localized states inside band gap, (2) band edges, (3) without defect states inside the band gap or near band edges
  #analyze the eigenvalues and band-edge states 
    #generates the 'perfect_band_edge_state.json' files to show the information on the eigenvalues and orbital information of the VBM and CBM in the perfect supercell. [parent defect directory]
    pydefect_vasp pbes -d perfect
    #create 'band_edge_orbital_infos.json' files at defect directories [in each defect directories, creates 'eigenvalues.pdf' file]
    pydefect_vasp beoi -d *_* -pbes perfect/perfect_band_edge_state.json  #creates 'eigenvalues.pdf' file
    #generate the edge_characters.json file with the band edge states (bes) command [in each defect directory] did not work, the next command is skipped]
    pydefect_vasp bes -d *_*/ -pbes perfect/perfect_band_edge_state.json #similar orbital to the edge are not found.
    #Instead of the above command, can work manually
    for dir in *_*/; do cd $dir; pydefect bes -d . -pbes ../perfect/perfect_band_edge_state.json; cd ..; done

Step-26: Plot defect formation eenergies
  #defect formation energies requires - the band edges, chemical potentials of the competing phases, and total energies of the perfect and defective supercells.
  pydefect dei -d *_*/ -pcr perfect/calc_results.json -u ../unitcell/unitcell_hse.yaml -s ../cpd/standard_energies.yaml
  #create a defect_energy_summary.json file with the defect_energy_summary (= des) sub-command. [in the parent defect folder]
  pydefect des -d *_*/ -u ../unitcell/unitcell_hse.yaml -pbes perfect/perfect_band_edge_state.json -t ../cpd/target_vertices.yaml
  #create the calc_summary.json file with the calc_summary (= cs) sub-command [in the parent defect directory]
  pydefect cs -d *_*/ -pcr perfect/calc_results.json
  #defect formation energies are plotted as a function of the Fermi level with the plot_defect_formation_energy (= pe) sub-command. 
  #Here, after "-l" command, A or B is coming from the cpd diagram. A = Ga-rich, B = N-rich condition
  pydefect plot_defect_formation_energy -d defect_energy_summary.json -l A --allow_shallow -y -2 10 
  pydefect plot_defect_formation_energy -d defect_energy_summary.json -l B --allow_shallow -y -2 10






























################### check the location of .pmgrc.yaml file #################
[mvm7218@p-sc-2344 structure_opt]$ cd ~
[mvm7218@p-sc-2344 ~]$ find . -name .pmgrc.yaml -type f -exec readlink -f \{\} \;
/storage/home/mvm7218/.config/.pmgrc.yaml
/storage/home/mvm7218/.pmgrc.yaml


################# file content - mp_tools.py ##########################

# -*- coding: utf-8 -*-

from typing import List

from pydefect.defaults import defaults
from pymatgen.core import Element
# from pymatgen.ext.matproj import MPRester, MPRestError
from mp_api.client import MPRester, MPRestError
from vise.util.logger import get_logger
from itertools import combinations, chain

elements = [e.name for e in Element]


logger = get_logger(__name__)


class MpQuery:
    def __init__(self,
                 element_list: List[str],
                 e_above_hull: float = defaults.e_above_hull,
                 properties: List[str] = None):
        # API key is parsed via .pmgrc.yaml
        with MPRester() as m:
            # Due to mp_decode=True by default, class objects are restored.
            excluded = list(set(elements) - set(element_list))
            try:
                default_properties = ["task_id", "full_formula", "final_energy",
                                      "structure", "spacegroup", "band_gap",
                                      "total_magnetization", "magnetic_type"]
                criteria = (
                    {"elements": {"$in": element_list, "$nin": excluded},
                     "e_above_hull": {"$lte": e_above_hull}})
                self.materials = m.query(
                    criteria=criteria,
                    properties=properties or default_properties)
            except:
                logger.info("Note that you're using the newer MPRester.")
                default_fields = ["material_id", "formula_pretty", "structure",
                                  "symmetry", "band_gap", "total_magnetization",
                                  "types_of_magnetic_species"]
                properties = properties or default_fields
                self.materials = m.materials.summary.search(
                    chemsys='-'.join(element_list),
                    #elements=element_list,
                    #exclude_elements=excluded,
                    energy_above_hull=(-1e-5, e_above_hull),
                    fields=properties)


class MpEntries:
    def __init__(self,
                 element_list: List[str],
                 e_above_hull: float = defaults.e_above_hull,
                 additional_properties: List[str] = None):
        excluded = list(set(elements) - set(element_list))
        criteria = ({"elements": {"$in": element_list, "$nin": excluded},
                     "e_above_hull": {"$lte": e_above_hull}})
        with MPRester() as m:
            self.materials = m.get_entries(
                criteria, property_data=additional_properties)


#################### run.slurm file #############################
#!/bin/bash

#SBATCH --job-name=GaN
##SBATCH --account=open
##SBATCH --partition=open
#SBATCH --account=mjj5508_b    ##For Prof. Mia Jin's access point
#SBATCH --partition=sla-prio   ##For Prof. Mia Jin's access point
#SBATCH --mem=32GB
#SBATCH --time=00:30:00
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=32
##SBATCH --cpus-per-task=2

echo "Job started on $(hostname) at $(date)"
source ~/.bashrc
export PATH="$(pwd):${PATH}"
# Load VASP module
module use /storage/icds/RISE/sw8/modules
module load vasp/vasp-6.3.1vtst

echo "Start: $(date)"
srun vasp_std
echo "End: $(date)"

#command line execution
#sbatch run_dos.slurm



######################### defect_vasp_run.sh ##########################

for dir in */; do
    cd $dir
    # Submit the job and capture the job ID
    JOB_ID=$(sbatch srun.slurm | awk '{print $4}')
    cd ..

    # Wait for the job to complete
    echo "Waiting for job $JOB_ID to complete..."
    while squeue | grep -q "$JOB_ID"; do
        sleep 10  # Check every 10 seconds
    done
    echo "Job $JOB_ID completed."
done

########################## defect_vasp_run_parallel.sh ##################

for dir in */; do
    cd $dir
    # Submit the job and capture the job ID
    JOB_ID=$(sbatch srun.slurm | awk '{print $4}')
    cd ..

    # Wait for the job to complete
    echo "Waiting for job $JOB_ID to complete..."
done


######################### Check electronic and ionic convergence ###############


#########################   check_convergence.sh  ##############################

#!/bin/bash

# Loop through directories
for dir in */; do
  # Check if OUTCAR exists
  if [[ -f "${dir}/OUTCAR" ]]; then
    # Check for ionic convergence
    if grep -q "reached required accuracy - stopping structural energy minimisation" "${dir}/OUTCAR"; then
      echo "Ionic convergence achieved in ${dir}"
    else
      echo "Ionic convergence NOT achieved in ${dir}"
    fi
  else
    echo "OUTCAR not found in ${dir}"
  fi
done

################# Correct any INCAR settings ################
for i in */;do cd $i; sed -i '35d' INCAR; sed -i '36d' INCAR; echo "EDIFFG  =  -0.01" >> INCAR; echo "NSW = 100" >> INCAR; cd ../;done




########################## Suggestions ##################

execute command from the basic terminal, not jupyter terminal

## Cancel all the sbatch queued file by 'job name'
>> scancel --name=GaN_supercell_defect_DOPED

>> Remove folder: rm -rf folder_name
>> Remove file: rm -r file_name
## If permission denied while using 'remove (rm)', change permission and access
>> chmod -R u+rwX folder_or_file_name
>> rm -rf folder_or_file_name



scancel --name=GaN_supercell_defect_DOPED


#######################

[Run 'defect/perfect' separately]

[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf INCAR; cp ../INCAR .; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.out; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.json; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.OUTCAR; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.WAVECAR; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.xml; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; rm -rf *.CHGCAR; cd ..; done
[mvm7218@submit03 defect]$ for dir in */;do cd $dir; sbatch srun.slurm; cd ..; done
[mvm7218@submit03 defect]$ 


####################### print .json or .yaml file #################
pydefect_print ***.json
pydefect_print ***.yaml

##################### Formation energy plotting ######################
pydefect pe -d defect_energy_summary.json
pydefect plot_defect_formation_energy -h

usage: pydefect plot_defect_formation_energy [-h] -d DEFECT_ENERGY_SUMMARY [--allow_shallow] [--no_corrections] -l LABEL [-y Y_RANGE Y_RANGE] [--no_label_line] [--no_add_charges]
                                             [--plot_all_energies]
Show and plot defect formation energies.
optional arguments:
  -h, --help            show this help message and exit
  -d DEFECT_ENERGY_SUMMARY, --defect_energy_summary DEFECT_ENERGY_SUMMARY
                        defect_energy_summary.json file path. (default: None)
  --allow_shallow       Set when the energies of shallow defects are allowed. (default: False)
  --no_corrections      Set when corrections are switched off. (default: True)
  -l LABEL, --label LABEL
                        Label in the chemical potential diagram (default: None)
  -y Y_RANGE Y_RANGE, --y_range Y_RANGE Y_RANGE
                        Energy range in y-axis (default: None)
  --no_label_line       Set the labels not to locate on the lines. (default: True)
  --no_add_charges      Set the charges not to appear. (default: True)
  --plot_all_energies   Plot energies of all charge states including unstable ones. (default: False)


Examples:
pydefect plot_defect_formation_energy -d defect_energy_summary.json -l A --allow_shallow -y -30 10 --no_add_charges
pydefect plot_defect_formation_energy -d defect_energy_summary.json -l B --allow_shallow -y -30 10 --no_label_line
pydefect plot_defect_formation_energy -d defect_energy_summary.json -l B --allow_shallow  -y -30 10


########################### Seeking help in Pydefect ###################
pydefect_vasp [the_command_key] -h 
pydefect_vasp [the_command_key] --help

Examples:
pydefect_vasp beoi -h
pydefect pe --help


################### Bandgap plot #####################
#Get fermi level
grep "E-fermi" OUTCAR | tail -1 | awk '{print $3}'
#use the observed value = YOUR_FERMI_LEVEL

awk -v fermi=YOUR_FERMI_LEVEL '
/^[[:space:]]+[0-9]/ {
    for (i=2; i<=NF; i++) {
        energy = $i - fermi;
        if (energy < 0 && energy > max_vbm) {
            max_vbm = energy;  # Finding maximum valence band
        }
        if (energy > 0 && (energy < min_cbm)) {
            min_cbm = energy;  # Finding minimum conduction band
        }
    }
}
END {
    print "VBM: " max_vbm " eV";
    print "CBM: " min_cbm " eV";
    if (min_cbm > max_vbm) {
        print "Band Gap: " min_cbm - max_vbm " eV";
    } else {
        print "Metallic or zero band gap";
    }
}' EIGENVAL
